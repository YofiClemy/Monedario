name: Build Roadmap JSON
on:
  schedule: [{ cron: "0 */6 * * *" }]
  workflow_dispatch: {}
jobs:
  fetch:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ROADMAP_PAT }}
      LOGIN: YofiClemy         # your account (user or org)
      PROJECT_NUMBER: "1"      # your project number
    steps:
      - uses: actions/checkout@v4

      - name: Fetch Project items â†’ roadmap.json
        run: |
          mkdir -p data
          cat > query.graphql <<'GQL'
          query($login: String!, $number: Int!) {
            user(login: $login) {
              projectV2(number: $number) { ...Proj }
            }
            organization(login: $login) {
              projectV2(number: $number) { ...Proj }
            }
          }
          fragment Proj on ProjectV2 {
            title
            url
            fields(first: 50) {
              nodes { __typename ... on ProjectV2SingleSelectField { id name options { id name } } }
            }
            items(first: 200) {
              nodes {
                content {
                  __typename
                  ... on Issue { title url number repository { nameWithOwner } labels(first:10){nodes{name}} }
                  ... on PullRequest { title url number repository { nameWithOwner } }
                  ... on DraftIssue { title body }
                }
                fieldValues(first: 20) {
                  nodes {
                    __typename
                    ... on ProjectV2ItemFieldSingleSelectValue {
                      field { __typename ... on ProjectV2SingleSelectField { name } }
                      name
                    }
                  }
                }
              }
            }
          }
          GQL

          # Call GraphQL
          curl -s -H "Authorization: Bearer $GH_TOKEN" \
               -H "Content-Type: application/json" \
               -d "{\"query\":\"$(tr -d '\n' < query.graphql)\",\"variables\":{\"login\":\"$LOGIN\",\"number\":$PROJECT_NUMBER}}" \
               https://api.github.com/graphql > api.json

          echo "Raw GraphQL response:"
          cat api.json

          node - <<'NODE'
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('api.json','utf8'));

          if (data.errors) {
            console.error("GraphQL errors:", JSON.stringify(data.errors, null, 2));
            process.exit(1);
          }
          const proj = data?.data?.user?.projectV2 || data?.data?.organization?.projectV2;
          if (!proj) {
            console.error("No project found. Check LOGIN/PROJECT_NUMBER and token scopes (User permissions: Projects: Read).");
            process.exit(1);
          }

          const statusFieldName = 'Status'; // adjust to your field name
          const items = (proj.items.nodes || []).map(n => {
            const c = n.content || {};
            const status = (n.fieldValues?.nodes||[])
              .find(v => v.field && v.field.name === statusFieldName)?.name || 'Backlog';
            const title = c.title || '(untitled)';
            const url = c.url || null;
            const repo = c.repository?.nameWithOwner || null;
            const labels = c.labels?.nodes?.map(l=>l.name) || [];
            return { title, url, repo, labels, status, type: c.__typename };
          });

          fs.writeFileSync('data/roadmap.json', JSON.stringify({
            project: { title: proj.title, url: proj.url },
            updatedAt: new Date().toISOString(),
            items
          }, null, 2));
          console.log("Wrote data/roadmap.json with", items.length, "items");
          NODE

      - name: Commit JSON
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add data/roadmap.json
          git commit -m "Update roadmap.json" || echo "No changes"
          git push
