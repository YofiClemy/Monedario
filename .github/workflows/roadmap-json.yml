- name: Fetch Project items â†’ roadmap.json
  env:
    GH_TOKEN: ${{ secrets.ROADMAP_PAT }}
    LOGIN: YofiClemy
    PROJECT_NUMBER: "1"
  run: |
    mkdir -p data
    cat > query.graphql <<'GQL'
    query($login: String!, $number: Int!) {
      user(login: $login) {
        projectV2(number: $number) {
          title
          url
          fields(first: 50) {
            nodes {
              __typename
              ... on ProjectV2SingleSelectField {
                id
                name
                options { id name }
              }
            }
          }
          items(first: 100) {
            nodes {
              content {
                __typename
                ... on Issue {
                  title
                  url
                  number
                  repository { nameWithOwner }
                  labels(first: 10) { nodes { name } }
                }
                ... on PullRequest {
                  title
                  url
                  number
                  repository { nameWithOwner }
                }
                ... on DraftIssue { title body }
              }
              fieldValues(first: 20) {
                nodes {
                  __typename
                  ... on ProjectV2ItemFieldSingleSelectValue {
                    field { __typename ... on ProjectV2SingleSelectField { name } }
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
    GQL

    BODY=$(jq -n \
      --arg q "$(cat query.graphql)" \
      --arg login "$LOGIN" \
      --argjson number $PROJECT_NUMBER \
      '{query: $q, variables: {login: $login, number: $number}}')

    curl -s \
      -H "Authorization: Bearer $GH_TOKEN" \
      -H "Content-Type: application/json" \
      -d "$BODY" https://api.github.com/graphql > api.json

    echo "Raw GraphQL response:"
    cat api.json

    node - <<'NODE'
    const fs = require('fs');
    const data = JSON.parse(fs.readFileSync('api.json','utf8'));
    if (data.errors) {
      console.error("GraphQL errors:", JSON.stringify(data.errors, null, 2));
      process.exit(1);
    }
    const proj = data?.data?.user?.projectV2;
    if (!proj) { console.error("No project found. Check LOGIN/PROJECT_NUMBER and token scopes."); process.exit(1); }

    const STATUS_FIELD = 'Status'; // change if your field has a different name
    const items = (proj.items.nodes || []).map(n => {
      const c = n.content || {};
      const status = (n.fieldValues?.nodes||[])
        .find(v => v.field && v.field.name === STATUS_FIELD)?.name || 'Backlog';
      const title = c.title || '(untitled)';
      const url = c.url || null;
      const repo = c.repository?.nameWithOwner || null;
      const labels = c.labels?.nodes?.map(l=>l.name) || [];
      return { title, url, repo, labels, status, type: c.__typename };
    });

    fs.writeFileSync('data/roadmap.json', JSON.stringify({
      project: { title: proj.title, url: proj.url },
      updatedAt: new Date().toISOString(),
      items
    }, null, 2));
    console.log("Wrote data/roadmap.json with", items.length, "items");
    NODE
